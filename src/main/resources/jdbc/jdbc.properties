### Database Configure #######
#JDBC驱动类,路径，登陆用户名及密码
jdbc.driverClassName=com.mysql.jdbc.Driver

#jdbc.url=jdbc\:mysql\://192.168.1.200\:3306/bd_study?characterEncoding\=UTF-8&zeroDateTimeBehavior\=convertToNull&transformedBitIsBoolean\=true
jdbc.url=jdbc\:mysql\://127.0.0.1\:3306/badou?characterEncoding\=UTF-8&zeroDateTimeBehavior\=convertToNull&transformedBitIsBoolean\=true
#jdbc.username=bd_study
#jdbc.password=ibadou999
jdbc.username=root
jdbc.password=


hibernate.mappingDirectory = /WEB-INF/hibernate
#hibernate连接提供类
hibernate.connection.provider_class=org.hibernate.connection.ProxoolConnectionProvider
#是否自动提交
hibernate.connection.autocommit=false
#数据库类型描述
#org.hibernate.dialect.Oracle10gDialect , MySQL5InnoDBDialect....
hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#是否使用查询缓存
hibernate.cache.use_query_cache=true
#是否使用二级缓存
hibernate.cache.use_second_level_cache=true
#缓存配置文件hibernate.cache.provider_configuration_file_resource_path
#cache/ehcache.xml, cache/oscache.propreties
hibernate.cache.provider_configuration_file_resource_path=cache/ehcache.xml
#缓存提供类(类型)
#net.sf.ehcache.hibernate.EhCacheProvider
#com.opensymphony.oscache.hibernate.OSCacheProvider
hibernate.cache.provider_class=net.sf.ehcache.hibernate.EhCacheProvider
#映射文件动态关联策略，
#create：表示启动的时候先drop，再create
#create-drop: 也表示创建，只不过再系统关闭前执行一下drop
#update: 这个操作启动的时候会去检查schema是否一致，如果不一致会做scheme更新
#validate: 启动时验证现有schema与你配置的hibernate是否一致，如果不一致就抛出异常，并不做更新
#hibernate.hbm2ddl.auto=update
#设定JDBC的Statement读取数据的时候每次从数据库中取出的记录条数
hibernate.jdbc.fetch_size=100
#设定对数据库进行批量删除，批量更新和批量插入的时候的批次大小
hibernate.jdbc.batch_size=50
#设置外连接抓取树的最大深度 取值. 建议设置为0到3之间
hibernate.max_fetch_depth=3
#是否打印SQL
hibernate.show_sql=true
#是否格式化输出SQL
hibernate.format_sql=false

##proxool池属性
##别名
jdbc.proxool.alias = db_sderp
#proxool自动侦察各个连接状态的时间间隔(毫秒),侦察到空闲的连接就马上回收,超时的销毁 默认30秒）
jdbc.proxool.houseKeepingSleepTime=30000 
#连接超时测试语句
jdbc.proxool.houseKeepingTestSql=select NOW()
#最少保持的空闲连接数
jdbc.proxool.prototypeCount = 10
#如果housekeeper检测到某个线程的活动时间大于这个数值.它将会杀掉这个线程,默认为5分钟,单位毫秒
jdbc.proxool.maximumActiveTime = 900000
#连接的最大生命周期,单位毫秒
jdbc.proxool.maximumConnectionLifetime = 180000
#最大连接数
jdbc.proxool.maximumConnectionCount=200
#最小连接数
jdbc.proxool.minimumConnectionCount=10
#是指在任一时刻，可以（同时）建立的最大连接数，也就是说，就是已经请求的、但还没可用的新连接数量。
#因为连接可以用多线程建立，从决定要建立连接到连接可用是需要一定时间的，所以我们需要一些方式来避免大量的线程想同时建立连接。
#默认值是10
jdbc.proxool.simultaneousBuildThrottle = 10
#连接池使用状况统计。 参数“10s,1m,1d”
jdbc.proxool.statistics = 1m
#日志统计跟踪类型。 参数“ERROR”或 “INFO”
jdbc.proxool.statisticsLogLevel = ERROR
#是否调用日志logged.DEBUG打印SQL执行时间
jdbc.proxool.trace=true
#是否详细输出
jdbc.proxool.verbose=false